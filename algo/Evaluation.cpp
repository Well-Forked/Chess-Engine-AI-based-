#include "Evaluation.h"
#include <string.h>

#define WHITE 0
#define BLACK 1

int pawn_value = 100;
int knight_value = 300;
int bishop_value = 300;
int rook_value = 500;
int queen_value = 900;
int king_value = 10000;

int pawn_phase_val = 0;
int knight_phase_val = 1;
int bishop_phase_val = 1;
int rook_phase_val = 2;
int queen_phase_val = 4;

struct eval_data
{
    int p[2], r[2], n[2], b[2], q[2];
    int pos_p[2][8];
    int pos_r[2][2];
    int pos_n[2][2];
    int pos_b[2][2];
    int pos_q[2];
    int pos_k[2];

    // int BISHOP_PAIR;
    // int P_KNIGHT_PAIR;
    // int P_ROOK_PAIR;
    // int ROOK_OPEN;
    // int ROOK_HALF;
    // int P_BISHOP_TRAPPED_A7;
    // int P_BISHOP_TRAPPED_A6;
    // int P_KNIGHT_TRAPPED_A8;
    // int P_KNIGHT_TRAPPED_A7;
    // int P_BLOCK_CENTRAL_PAWN;
    // int P_KING_BLOCKS_ROOK;

    // int SHIELD_2;
    // int SHIELD_3;
    // int P_NO_SHIELD;

    // int RETURNING_BISHOP;
    // int P_C3_KNIGHT;
    // int P_NO_FIANCHETTO;
    // int FIANCHETTO;
    // int TEMPO;
    // int ENDGAME_MAT;
};
struct eval_data e;

int pawn_pcsq_mg[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    -6, -4, 1, 1, 1, 1, -4, -6,
    -6, -4, 1, 2, 2, 1, -4, -6,
    -6, -4, 2, 8, 8, 2, -4, -6,
    -6, -4, 5, 10, 10, 5, -4, -6,
    -4, -4, 1, 5, 5, 1, -4, -4,
    -6, -4, 1, -24, -24, 1, -4, -6,
    0, 0, 0, 0, 0, 0, 0, 0};

int pawn_pcsq_eg[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    -6, -4, 1, 1, 1, 1, -4, -6,
    -6, -4, 1, 2, 2, 1, -4, -6,
    -6, -4, 2, 8, 8, 2, -4, -6,
    -6, -4, 5, 10, 10, 5, -4, -6,
    -4, -4, 1, 5, 5, 1, -4, -4,
    -6, -4, 1, -24, -24, 1, -4, -6,
    0, 0, 0, 0, 0, 0, 0, 0};

int knight_pcsq_mg[64] = {
    -8, -8, -8, -8, -8, -8, -8, -8,
    -8, 0, 0, 0, 0, 0, 0, -8,
    -8, 0, 4, 4, 4, 4, 0, -8,
    -8, 0, 4, 8, 8, 4, 0, -8,
    -8, 0, 4, 8, 8, 4, 0, -8,
    -8, 0, 4, 4, 4, 4, 0, -8,
    -8, 0, 1, 2, 2, 1, 0, -8,
    -8, -12, -8, -8, -8, -8, -12, -8};

int knight_pcsq_eg[64] = {
    -8, -8, -8, -8, -8, -8, -8, -8,
    -8, 0, 0, 0, 0, 0, 0, -8,
    -8, 0, 4, 4, 4, 4, 0, -8,
    -8, 0, 4, 8, 8, 4, 0, -8,
    -8, 0, 4, 8, 8, 4, 0, -8,
    -8, 0, 4, 4, 4, 4, 0, -8,
    -8, 0, 1, 2, 2, 1, 0, -8,
    -8, -12, -8, -8, -8, -8, -12, -8};
int bishop_pcsq_mg[64] = {
    -4, -4, -4, -4, -4, -4, -4, -4,
    -4, 0, 0, 0, 0, 0, 0, -4,
    -4, 0, 2, 4, 4, 2, 0, -4,
    -4, 0, 4, 6, 6, 4, 0, -4,
    -4, 0, 4, 6, 6, 4, 0, -4,
    -4, 1, 2, 4, 4, 2, 1, -4,
    -4, 2, 1, 1, 1, 1, 2, -4,
    -4, -4, -12, -4, -4, -12, -4, -4};

int bishop_pcsq_eg[64] = {
    -4, -4, -4, -4, -4, -4, -4, -4,
    -4, 0, 0, 0, 0, 0, 0, -4,
    -4, 0, 2, 4, 4, 2, 0, -4,
    -4, 0, 4, 6, 6, 4, 0, -4,
    -4, 0, 4, 6, 6, 4, 0, -4,
    -4, 1, 2, 4, 4, 2, 1, -4,
    -4, 2, 1, 1, 1, 1, 2, -4,
    -4, -4, -12, -4, -4, -12, -4, -4};
int rook_pcsq_mg[64] = {
    5, 5, 5, 5, 5, 5, 5, 5,
    20, 20, 20, 20, 20, 20, 20, 20,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    0, 0, 0, 2, 2, 0, 0, 0};

int rook_pcsq_eg[64] = {
    5, 5, 5, 5, 5, 5, 5, 5,
    20, 20, 20, 20, 20, 20, 20, 20,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    0, 0, 0, 2, 2, 0, 0, 0};
int queen_pcsq_mg[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 2, 3, 3, 2, 0, 0,
    0, 0, 2, 3, 3, 2, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 0, 0,
    -5, -5, -5, -5, -5, -5, -5, -5};

int queen_pcsq_eg[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 2, 3, 3, 2, 0, 0,
    0, 0, 2, 3, 3, 2, 0, 0,
    0, 0, 1, 2, 2, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 0, 0,
    -5, -5, -5, -5, -5, -5, -5, -5};

int king_pcsq_mg[64] = {
    -40, -30, -50, -70, -70, -50, -30, -40,
    -30, -20, -40, -60, -60, -40, -20, -30,
    -20, -10, -30, -50, -50, -30, -10, -20,
    -10, 0, -20, -40, -40, -20, 0, -10,
    0, 10, -10, -30, -30, -10, 10, 0,
    10, 20, 0, -20, -20, 0, 20, 10,
    30, 40, 20, 0, 0, 20, 40, 30,
    40, 50, 30, 10, 10, 30, 50, 40};

int king_pcsq_eg[64] = {
    -72, -48, -36, -24, -24, -36, -48, -72,
    -48, -24, -12, 0, 0, -12, -24, -48,
    -36, -12, 0, 12, 12, 0, -12, -36,
    -24, 0, 12, 24, 24, 12, 0, -24,
    -24, 0, 12, 24, 24, 12, 0, -24,
    -36, -12, 0, 12, 12, 0, -12, -36,
    -48, -24, -12, 0, 0, -12, -24, -48,
    -72, -48, -36, -24, -24, -36, -48, -72};
int weak_pawn_pcsq[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    -10, -12, -14, -16, -16, -14, -12, -10,
    -10, -12, -14, -16, -16, -14, -12, -10,
    -10, -12, -14, -16, -16, -14, -12, -10,
    -10, -12, -14, -16, -16, -14, -12, -10,
    -8, -12, -14, -16, -16, -14, -12, -10,
    -8, -12, -14, -16, -16, -14, -12, -10,
    0, 0, 0, 0, 0, 0, 0, 0};

int passed_pawn_pcsq[64] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    100, 100, 100, 100, 100, 100, 100, 100,
    80, 80, 80, 80, 80, 80, 80, 80,
    60, 60, 60, 60, 60, 60, 60, 60,
    40, 40, 40, 40, 40, 40, 40, 40,
    20, 20, 20, 20, 20, 20, 20, 20,
    20, 20, 20, 20, 20, 20, 20, 20,
    0, 0, 0, 0, 0, 0, 0, 0};

void initialize()
{
}

int calc_npm(int color)
{
    int ret = e.b[color] * bishop_value + e.n[color] * knight_value + e.r[color] * rook_value + e.q[color] * queen_value;
    return ret;
}

int middle_game()
{
}

int end_game()
{
}

int calc_phase()
{
    int tmax = 4 * (bishop_phase_val + knight_phase_val + rook_phase_val) + 2 * queen_phase_val, tmin = 0;
    int phase = (e.b[BLACK] + e.b[WHITE]) * bishop_phase_val + (e.n[BLACK] + e.n[WHITE]) * knight_phase_val;
    phase += (e.r[BLACK] + e.r[WHITE]) * rook_phase_val + (e.q[BLACK] + e.q[WHITE]) * queen_phase_val;
    int ret = (phase * 128 + 8) / (tmax - tmin);
    return ret;
}

int evaluate(char pos[8][8])
{
    int ret = 0;
    initialize();
    int phase = calc_phase();
    int mid_val = middle_game();
    int end_val = end_game();
    ret = (mid_val * phase + (128 - phase) * end_val) / 128;
    return ret;
}